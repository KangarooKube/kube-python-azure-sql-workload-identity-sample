apiVersion: v1
kind: Namespace
metadata:
  name: workload-identity-testing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: $AZURE_CLIENT_ID
  labels:
    azure.workload.identity/use: "true"
    k8slens-edit-resource-version: v1
  name: workload-identity-database-sa
  namespace: workload-identity-testing
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: azure-sql-python-workload-identity-sample
  name: azure-sql-python-workload-identity-sample
  namespace: workload-identity-testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-sql-python-workload-identity-sample
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: azure-sql-python-workload-identity-sample
        azure.workload.identity/use: "true"
        name: azure-sql-python-workload-identity-sample
    spec:
      automountServiceAccountToken: true
      containers:
        - env:
            - name: DATABASENAME
              value: $DATABASE_NAME
            - name: SERVERNAME
              value: $SERVER_NAME
          image: ghcr.io/kangarookube/kube-python-azure-sql-workload-identity-sample:latest
          imagePullPolicy: Always
          name: azure-sql-python-workload-identity-sample
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 250m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: workload-identity-database-sa
      serviceAccountName: workload-identity-database-sa
      terminationGracePeriodSeconds: 30
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: "cloudflare-issuer"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  labels:
    k8slens-edit-resource-version: v1
  name: azure-sql-python-workload-identity-sample
  namespace: workload-identity-testing
spec:
  rules:
    - host: $APP_INGRESS_FQDN
      http:
        paths:
          - backend:
              service:
                name: azure-sql-python-workload-identity-sample
                port:
                  name: flask
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - $APP_INGRESS_FQDN
      secretName: azure-sql-python-workload-identity-sample-tls-secret
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels: {}
  name: azure-sql-python-workload-identity-sample
  namespace: workload-identity-testing
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: flask
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: azure-sql-python-workload-identity-sample
  sessionAffinity: None
  type: ClusterIP